package com.jiehu.code.dp.base;

/**
 * 746. 使用最小花费爬楼梯
 * https://leetcode.cn/problems/min-cost-climbing-stairs/
 * 给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。
 * <p>
 * 你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。
 * <p>
 * 请你计算并返回达到楼梯顶部的最低花费。
 * 示例 1：
 * <p>
 * 输入：cost = [10,15,20]
 * 输出：15
 * 解释：你将从下标为 1 的台阶开始。
 * - 支付 15 ，向上爬两个台阶，到达楼梯顶部。
 * 总花费为 15 。
 * 示例 2：
 * <p>
 * 输入：cost = [1,100,1,1,1,100,1,1,100,1]
 * 输出：6
 * 解释：你将从下标为 0 的台阶开始。
 * - 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。
 * - 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。
 * - 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。
 * - 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。
 * - 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。
 * - 支付 1 ，向上爬一个台阶，到达楼梯顶部。
 * 总花费为 6 。
 * <p>
 * 提示：
 * <p>
 * 2 <= cost.length <= 1000
 * 0 <= cost[i] <= 999
 */
public class MinCostClimbingStairs {
    public int minCostClimbingStairs(int[] cost) {
        /**
         * 1.定义dp[i], 爬到第i层时，最少花费
         */
        int[] dp = new int[cost.length + 1];
        /**
         * 2. 递推公式：
         * 到达楼层i的状态有两个：
         * 1）从i-1开始爬，也就是： dp[i] = dp[i-1] + cost[i-1];
         * 2) 从i-2开始爬，也就是： dp[i] = dp[i-2] + cost[i-2];
         * 因为是去最下花费，那就是从i-1和i-2两个爬楼梯中选择最小的一个,所以：
         * dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2])
         */
        /**
         * 3. 初始化dp数组,已经明确从第0或者第1开始花费都是0，dp[0] = 0, dp[1] = 1
         * 4. 遍历顺序，从第2层开始
         */
        dp[0] = 0;
        dp[1] = 0;
        for (int i = 2; i <= cost.length; i++) {
            dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
        }

        return dp[cost.length];
    }
}




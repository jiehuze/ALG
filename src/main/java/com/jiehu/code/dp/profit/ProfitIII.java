package com.jiehu.code.dp.profit;

/**
 * 123. 买卖股票的最佳时机 III
 * https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 示例 1:
 * 输入：prices = [3,3,5,0,0,3,1,4]
 * 输出：6
 * 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 * 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 * 示例 2：
 * 输入：prices = [1,2,3,4,5]
 * 输出：4
 * 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 * 示例 3：
 * 输入：prices = [7,6,4,3,1]
 * 输出：0
 * 解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
 * 示例 4：
 * 输入：prices = [1]
 * 输出：0
 * 提示：
 * 1 <= prices.length <= 105
 * 0 <= prices[i] <= 105
 */
public class ProfitIII {
    /**
     * 分析： 因为限制了买卖次数，最多可以买卖2次，所以一共由5中状态
     * 1）什么都不操作
     * 2）第一次买入
     * 3）第一次卖出
     * 4）第二次买入
     * 5）第二次卖出
     * 所以求最后在第 i 天的最大第二次卖出时的现金
     */
    public int maxProfit(int[] prices) {
        /**
         * 1. 定义: 因为由5中状态，所以j为5， i为天，dp[i][j] 为最大现金
         */
        int[][] dp = new int[prices.length][5];
        /**
         * 2. 递推公式： 根据5中状态：
         *   1) dp[i][0], dp[i][0] = dp[i-1]
         *   2）dp[i][1], 根据i-1状态
         *      A: 第i-1天买入了,i天就不需要买入： dp[i][1] = dp[i-1][1]
         *      B: 第i-1天不持有，i就需要买入： dp[i][1] = dp[i-1][0] - prices[i]
         *      所以： dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
         *   3) dp[i][2], 根据i-1状态
         *      A： 第 i-1 天持有，i天不卖： dp[i][2] = dp[i-1][2]
         *      B： 第 i-1 天持有，i天卖出: dp[i][2] = dp[i-1][1] + prices[i]
         *      所以： dp[i][2] = max(dp[i-1][2], dp[i-1][2] + prices[i])
         *   4) 同理：dp[i][3] = max(dp[i-1][3], dp[i-1][2] - prices[i])
         *   5）同理：dp[i][4] = max(dp[i-1][4], dp[i-1][3] + prices[i])
         *
         *  3. 初始化：
         *      dp[0][0] = 0
         *      dp[0][1] = -prices[0]
         *      dp[0][2] = 0
         *      dp[0][3] = -prices[0]
         *  4. 遍历顺序： 从1开始，由小到大
         */

        dp[0][1] = -prices[0];
        dp[0][3] = -prices[0];
        for (int i = 1; i < prices.length; i++) {
            dp[i][0] = dp[i - 1][0];
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
            dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1] + prices[i]);
            dp[i][3] = Math.max(dp[i - 1][3], dp[i - 1][2] - prices[i]);
            dp[i][4] = Math.max(dp[i - 1][4], dp[i - 1][3] + prices[i]);
        }

        return dp[prices.length - 1][4];
    }
}
